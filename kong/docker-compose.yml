version: '2.1'

services:

  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    volumes:
      - kong_data:/var/lib/postgresql/data
    #      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init-user-db.sh
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} && psql -d ${POSTGRES_DB} -U ${POSTGRES_USER} -c "SELECT 1=1"
      interval: 10s
      timeout: 5s
      retries: 5

  kong:
    image: ${KONG_IMAGE}
    container_name: kong
    depends_on:
      postgres:
        condition: service_healthy
      kong-migration:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - ${KONG_UPSTREAM_PORT}
      - ${KONG_ADMIN_PORT}
      - ${KONG_UPSTREAM_S_PORT}
    healthcheck:
      test: kong health
      interval: 10s
      timeout: 5s
      retries: 5


  kong-migration:
    image: ${KONG_IMAGE}
    container_name: kong-migration
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
    command: sh -c "(kong migrations up || kong migrations bootstrap) && touch migrations_run && sleep 30"
    healthcheck:
      test: "if [[ -f migrations_run ]] ; then exit 0; else exit 1; fi"
      interval: 10s
      timeout: 5s
      retries: 5

  kong-config:
    image: ${KONG_IMAGE}
    container_name: kong-config
    volumes:
      - ./kong/config.sh:/etc/kong/config.sh
    depends_on:
      kong:
        condition: service_healthy
    command: sh -c "chmod +x /etc/kong/config.sh
      && /etc/kong/config.sh"
    healthcheck:
      test: "if [[ -f migrations_run ]] ; then exit 0; else exit 1; fi"
      interval: 10s
      timeout: 5s
      retries: 5

  konga:
    image: ${KONGA_IMAGE}
    container_name: konga
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./konga/user_seed.js:/app/user_seed.js
      - ./konga/kong_node_seed.js:/app/kong_node_seed.js
    ports:
      - ${KONGA_PORT}
    environment:
      KONGA_SEED_USER_DATA_SOURCE_FILE: /app/user_seed.js
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /app/kong_node_seed.js
      NODE_ENV: production
    restart: on-failure


volumes:
  kong_data:
  konga_data:
  postgres_data: