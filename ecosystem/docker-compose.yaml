version: '3.8'

services:

  minio:
    image: ${MINIO_IMAGE}
    container_name: minio
    volumes:
      - minio_data:${VOLUME_PATH}
    ports:
      - ${MINIO_PORT}
    env_file:
      - .env
    command: server ${VOLUME_PATH}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  keycloak-postgres:
    image: ${KEYCLOAK_POSTGRES_IMAGE}
    container_name: postgres-keycloak
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${KEYCLOAK_POSTGRES_DB}
      POSTGRES_USER: ${KEYCLOAK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
    healthcheck:
      test: pg_isready -U ${KEYCLOAK_POSTGRES_USER} && psql -d ${KEYCLOAK_POSTGRES_DB} -U ${KEYCLOAK_POSTGRES_USER} -c "SELECT 1=1"
      interval: 10s
      timeout: 5s
      retries: 5

  kong-postgres:
    image: ${KONG_POSTGRES_IMAGE}
    container_name: postgres-kong
    volumes:
      - data:/var/lib/postgresql/data
    #      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init-user-db.sh
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${KONG_POSTGRES_DB}
      POSTGRES_USER: ${KONG_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KONG_POSTGRES_PASSWORD}
    healthcheck:
      test: pg_isready -U ${KONG_POSTGRES_USER} && psql -d ${KONG_POSTGRES_DB} -U ${KONG_POSTGRES_USER} -c "SELECT 1=1"
      interval: 10s
      timeout: 5s
      retries: 5


  keycloak:
    image: ${KEYCLOAK_IMAGE}
    container_name: keycloak
    volumes:
      - ./keycloak/:/opt/jboss/keycloak/imports1/
    #      - ./wait-for-it.sh:/opt/jboss/keycloak/imports1/wait-for-it.sh
    command:
      - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports1/realm-export.json"
    env_file:
      - .env
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-postgres
      DB_DATABASE: ${KEYCLOAK_POSTGRES_DB}
      DB_USER: ${KEYCLOAK_POSTGRES_USER}
      DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
    ports:
      - ${KEYCLOAK_PORT}
    depends_on:
      - keycloak-postgres

  kong-migration:
    image: ${KONG_IMAGE}
    container_name: kong-migration
    depends_on:
      - kong-postgres
    env_file:
      - .env
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-postgres
    command: sh -c "(kong migrations up || kong migrations bootstrap) && touch migrations_run && sleep 30"
    healthcheck:
      test: "if [[ -f migrations_run ]] ; then exit 0; else exit 1; fi"
      interval: 10s
      timeout: 5s
      retries: 5

  kong:
    image: ${KONG_IMAGE}
    container_name: kong
    depends_on:
      - kong-postgres
      - kong-migration
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-postgres
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    env_file:
      - .env
    ports:
      - ${KONG_UPSTREAM_PORT}
      - ${KONG_ADMIN_PORT}
      - ${KONG_UPSTREAM_S_PORT}
    healthcheck:
      test: kong health
      interval: 10s
      timeout: 5s
      retries: 5

  konga:
    image: ${KONGA_IMAGE}
    container_name: konga
    env_file:
      - .env
    depends_on:
      - kong-postgres
    volumes:
      - ./konga/user_seed.js:/app/user_seed.js
      - ./konga/kong_node_seed.js:/app/kong_node_seed.js
    ports:
      - ${KONGA_PORT}
    environment:
      KONGA_SEED_USER_DATA_SOURCE_FILE: /app/user_seed.js
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /app/kong_node_seed.js
      NODE_ENV: production


  kong-config:
    image: ${KONG_IMAGE}
    container_name: kong-config
    env_file:
      - .env
    volumes:
      - ./kong/config.sh:/etc/kong/config.sh
    depends_on:
      - kong
    command: sh -c "chmod +x /etc/kong/config.sh
      && /etc/kong/config.sh"
    healthcheck:
      test: "if [[ -f migrations_run ]] ; then exit 0; else exit 1; fi"
      interval: 10s
      timeout: 5s
      retries: 5

  elk:
    image: sebp/elk
    container_name: elk
    ports:
      - "5601:5601"
      - "9200:9200"
      - "5044:5044"
    env_file:
      - .env
    environment:
      - LOGSTASH_START=1
      - KIBANA_START=1
      - ELASTICSEARCH_START=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://elk:9200/"]
      interval: 30s
      timeout: 20s
      retries: 3


volumes:
  data:
  minio_data:
  keycloak_postgres_data: